/*
 * Image Store
 *
 * Image store service provides Albums and Image management operaions
 *
 * API version: 1.0.0
 * Contact: diksha.may14@outlook.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"github.com/gorilla/mux"
	"image-store-service/constants"
	"image-store-service/logger"
	"net/http"
)

// A Route defines the parameters for an api endpoint
type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

// Routes are a collection of defined api endpoints
type Routes []Route

// Router defines the required methods for retrieving api routes
type Router interface {
	Routes() Routes
}

// NewRouter creates a new router for any number of api routers
func NewRouter(routers ...Router) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, api := range routers {
		for _, route := range api.Routes() {
			var handler http.Handler
			handler = route.HandlerFunc
			handler = Logger(handler, route.Name)

			router.
				Methods(route.Method).
				Path(route.Pattern).
				Name(route.Name).
				Handler(handler)
		}
	}

	return router
}

// EncodeJSONResponse uses the json encoder to write an interface to the http response with an optional status code
func EncodeJSONResponse(i interface{}, status int, w http.ResponseWriter) {
	logger.Logger.Trace(constants.LogBeginFunc)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(status)
	if i == nil {
		return
	}
	responseString, err := json.Marshal(&i)
	if err != nil {
		logger.Logger.Error(err)
	}
	w.Write(responseString)
}
